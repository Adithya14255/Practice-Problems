#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    int priority;
    struct Node* next;
} Node;


Node* createNode(int data, int priority) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->priority = priority;
    newNode->next = NULL;
    return newNode;
}

int isEmpty(Node** head) {
    return (*head == NULL);
}

void enqueue(Node** head, int data, int priority) {
    Node* newNode = createNode(data, priority);
    
    
    if (isEmpty(head) || priority < (*head)->priority) {
        newNode->next = *head;
        *head = newNode;
    } else {
        
        Node* temp = *head;
        
        while (temp->next != NULL && temp->next->priority <= priority) {
            temp = temp->next;
        }
        
        newNode->next = temp->next;
        temp->next = newNode;
    }
}

int dequeue(Node** head) {
    if (isEmpty(head)) {
        printf("Queue is empty\n");
        return -1;
    }
    
    Node* temp = *head;
    int data = temp->data;
    
    *head = (*head)->next;
    free(temp);
    
    return data;
}


int peek(Node* head) {
    if (head == NULL) {
        printf("Queue is empty\n");
        return -1;
    }
    return head->data;
}



int main() {
    Node* pqHead = NULL; 

    enqueue(&pqHead, 10, 2);
    enqueue(&pqHead, 20, 1);
    enqueue(&pqHead, 30, 3);
    enqueue(&pqHead, 40, 1);

    printf("Dequeuing elements:\n");
    while (!isEmpty(&pqHead)) {
        printf("Data: %d\n", dequeue(&pqHead));
    }
    
    return 0;
}
