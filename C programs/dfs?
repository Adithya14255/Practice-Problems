#include<stdlib.h>
#include<stdio.h>

int count = 0;
int ** visited;

void find_paths(int** grid,int i,int j,int m,int n,int weight){
    if(visited[i][j] == 1) return;
    visited[i][j] = 1;
    
    if(i == m-1 && j == n-1){
        count++;
        visited[i][j] = 0;
        return;
    }

    if(i-1>=0 && grid[i-1][j] != 0 && weight<grid[i-1][j]){
        find_paths(grid,i-1,j,m,n,weight);
    }
    if(j-1>=0 && grid[i][j-1] != 0 && weight<grid[i][j-1]){
        find_paths(grid,i,j-1,m,n,weight);
    }
    if(i+1<m && grid[i+1][j] != 0 && weight<grid[i+1][j]){
        find_paths(grid,i+1,j,m,n,weight);
    }
    if(j+1<n && grid[i][j+1] != 0 && weight<grid[i][j+1]){
        find_paths(grid,i,j+1,m,n,weight);
    }

    visited[i][j] = 0;
    return;
}

int main()  
{ 
    int m = 2, n = 10, weight = 5;

    int grid_data[2][10] = {
        {6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
        {16,17,18,19,2,21,22,23,24,25}
    };

    int** grid = (int **)malloc(m*sizeof(int *));
    for(int i=0;i<m;i++){
        grid[i] = (int *)malloc(n*sizeof(int));
        for(int j=0;j<n;j++){
            grid[i][j] = grid_data[i][j];
        }
    }

    visited = (int **)malloc(m*sizeof(int *));
    for(int i=0;i<m;i++){
        visited[i] = (int *)malloc(n*sizeof(int));
        for(int j=0;j<n;j++){
            visited[i][j] = 0;
        }
    }

    find_paths(grid,0,0,m,n,weight);
    printf("Total paths: %d\n",count);

    return 0;  
}
