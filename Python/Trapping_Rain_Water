# sometimes solving is more important than solving good

class Solution:
    def trap(self, height: List[int]) -> int:
        water_hold = 0
        if len(height)==1:
            return 0
        pool = [[0]*len(height) for _ in range(max(height))]
        temp = 0
        for j in range(max(height)):
            for i in range(len(height)):
                if height[i] >= 1:
                    pool[temp][i] = 1
                    height[i]-=1
            temp+=1 
        for i in pool:
            l=0
            r=len(i)-1
            while i[l]!=1:
                if i[l]==0:
                    l+=1
            while i[r]!=1:
                if i[r]==0:
                    r-=1
            water_hold +=i[l:r+1].count(0)
        return water_hold

#Good sol - 
        if len(height)==1:
            return 0
        l = 0
        r = len(height)-1
        water_hold = 0
        lmax,rmax = height[l],height[r]
        while l<r:
            if height[l]<height[r]:
                l += 1
                lmax = max(lmax,height[l])
                water_hold += lmax - height[l]
            else:
                r -= 1 
                rmax = max(rmax,height[r])
                water_hold += rmax-height[r]

        return water_hold
                
                
