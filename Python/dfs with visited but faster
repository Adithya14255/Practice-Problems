class Solution:
    def dfs(self,board,i,j,m,n,word,temp,visited):
        if temp == len(word):
            return True
        visited[i][j] = 1
        if i+1<m:
            if board[i+1][j] == word[temp] and visited[i+1][j] == 0:
                if self.dfs(board,i+1,j,m,n,word,temp+1,visited):
                    return True
        if j+1<n:
            if board[i][j+1] == word[temp] and visited[i][j+1] == 0:
                if self.dfs(board,i,j+1,m,n,word,temp+1,visited):
                    return True
        if i-1>=0:
            if board[i-1][j] == word[temp] and visited[i-1][j] == 0:
                if self.dfs(board,i-1,j,m,n,word,temp+1,visited):
                    return True
        if j-1>=0:
            if board[i][j-1] == word[temp] and visited[i][j-1] == 0:
                if self.dfs(board,i,j-1,m,n,word,temp+1,visited):
                    return True
        visited[i][j] = 0
        return False
        
    def exist(self, board: List[List[str]], word: str) -> bool:
        visited = [[0 for _ in range(len(board[0]))] for _ in range(len(board))]
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0]:
                    if self.dfs(board,i,j,len(board),len(board[0]),word,1,visited):
                        return True
        return False
